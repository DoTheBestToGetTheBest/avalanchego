// Copyright (C) 2019-2022, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/platformvm/blocks/builder (interfaces: Builder)

// Package builder is a generated GoMock package.
package builder

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	snowman "github.com/ava-labs/avalanchego/snow/consensus/snowman"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "github.com/golang/mock/gomock"
)

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBuilder) Add(arg0 *txs.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBuilderMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBuilder)(nil).Add), arg0)
}

// AddUnverifiedTx mocks base method.
func (m *MockBuilder) AddUnverifiedTx(arg0 *txs.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUnverifiedTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUnverifiedTx indicates an expected call of AddUnverifiedTx.
func (mr *MockBuilderMockRecorder) AddUnverifiedTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnverifiedTx", reflect.TypeOf((*MockBuilder)(nil).AddUnverifiedTx), arg0)
}

// BuildBlock mocks base method.
func (m *MockBuilder) BuildBlock(arg0 context.Context) (snowman.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildBlock", arg0)
	ret0, _ := ret[0].(snowman.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBlock indicates an expected call of BuildBlock.
func (mr *MockBuilderMockRecorder) BuildBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBlock", reflect.TypeOf((*MockBuilder)(nil).BuildBlock), arg0)
}

// DisableAdding mocks base method.
func (m *MockBuilder) DisableAdding() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableAdding")
}

// DisableAdding indicates an expected call of DisableAdding.
func (mr *MockBuilderMockRecorder) DisableAdding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAdding", reflect.TypeOf((*MockBuilder)(nil).DisableAdding))
}

// EnableAdding mocks base method.
func (m *MockBuilder) EnableAdding() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableAdding")
}

// EnableAdding indicates an expected call of EnableAdding.
func (mr *MockBuilderMockRecorder) EnableAdding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAdding", reflect.TypeOf((*MockBuilder)(nil).EnableAdding))
}

// Get mocks base method.
func (m *MockBuilder) Get(arg0 ids.ID) *txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*txs.Tx)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBuilderMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuilder)(nil).Get), arg0)
}

// GetDropReason mocks base method.
func (m *MockBuilder) GetDropReason(arg0 ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropReason", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDropReason indicates an expected call of GetDropReason.
func (mr *MockBuilderMockRecorder) GetDropReason(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropReason", reflect.TypeOf((*MockBuilder)(nil).GetDropReason), arg0)
}

// Has mocks base method.
func (m *MockBuilder) Has(arg0 ids.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockBuilderMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockBuilder)(nil).Has), arg0)
}

// HasStakerTx mocks base method.
func (m *MockBuilder) HasStakerTx() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStakerTx")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStakerTx indicates an expected call of HasStakerTx.
func (mr *MockBuilderMockRecorder) HasStakerTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStakerTx", reflect.TypeOf((*MockBuilder)(nil).HasStakerTx))
}

// HasTxs mocks base method.
func (m *MockBuilder) HasTxs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTxs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTxs indicates an expected call of HasTxs.
func (mr *MockBuilderMockRecorder) HasTxs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTxs", reflect.TypeOf((*MockBuilder)(nil).HasTxs))
}

// MarkDropped mocks base method.
func (m *MockBuilder) MarkDropped(arg0 ids.ID, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDropped", arg0, arg1)
}

// MarkDropped indicates an expected call of MarkDropped.
func (mr *MockBuilderMockRecorder) MarkDropped(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDropped", reflect.TypeOf((*MockBuilder)(nil).MarkDropped), arg0, arg1)
}

// PeekStakerTx mocks base method.
func (m *MockBuilder) PeekStakerTx() *txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekStakerTx")
	ret0, _ := ret[0].(*txs.Tx)
	return ret0
}

// PeekStakerTx indicates an expected call of PeekStakerTx.
func (mr *MockBuilderMockRecorder) PeekStakerTx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekStakerTx", reflect.TypeOf((*MockBuilder)(nil).PeekStakerTx))
}

// PeekTxs mocks base method.
func (m *MockBuilder) PeekTxs(arg0 int) []*txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeekTxs", arg0)
	ret0, _ := ret[0].([]*txs.Tx)
	return ret0
}

// PeekTxs indicates an expected call of PeekTxs.
func (mr *MockBuilderMockRecorder) PeekTxs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeekTxs", reflect.TypeOf((*MockBuilder)(nil).PeekTxs), arg0)
}

// Preferred mocks base method.
func (m *MockBuilder) Preferred() (snowman.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preferred")
	ret0, _ := ret[0].(snowman.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preferred indicates an expected call of Preferred.
func (mr *MockBuilderMockRecorder) Preferred() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preferred", reflect.TypeOf((*MockBuilder)(nil).Preferred))
}

// Remove mocks base method.
func (m *MockBuilder) Remove(arg0 []*txs.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockBuilderMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBuilder)(nil).Remove), arg0)
}

// ResetBlockTimer mocks base method.
func (m *MockBuilder) ResetBlockTimer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetBlockTimer")
}

// ResetBlockTimer indicates an expected call of ResetBlockTimer.
func (mr *MockBuilderMockRecorder) ResetBlockTimer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetBlockTimer", reflect.TypeOf((*MockBuilder)(nil).ResetBlockTimer))
}

// SetPreference mocks base method.
func (m *MockBuilder) SetPreference(arg0 ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreference", arg0)
}

// SetPreference indicates an expected call of SetPreference.
func (mr *MockBuilderMockRecorder) SetPreference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreference", reflect.TypeOf((*MockBuilder)(nil).SetPreference), arg0)
}

// Shutdown mocks base method.
func (m *MockBuilder) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockBuilderMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockBuilder)(nil).Shutdown))
}
